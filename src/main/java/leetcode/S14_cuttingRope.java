package leetcode;

/**
 * Created by 清风
 * 2020/5/11 10:30
 *
 * 贪心算法
 *
 * 面试题14- I. 剪绳子
 * 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），
 * 每段绳子的长度记为 k[0],k[1]...k[m] 。
 * 请问 k[0]*k[1]*...*k[m] 可能的最大乘积是多少？例如，
 * 当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
 *
 * 示例 1：
 * 输入: 2
 * 输出: 1
 * 解释: 2 = 1 + 1, 1 × 1 = 1
 *
 * 示例 2:
 * 输入: 10
 * 输出: 36
 * 解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
 *
 * 为什么切分为3的优先级最高
 * 例如绳子长度为 99 ： 两段 9=4+59=4+5 和 三段 9=3+3+39=3+3+3，则有 4 *5 <3×3×3 。
 * 也有少数反例，例如 66 ： 两段 6=3+36=3+3 和 三段 6=2+2+26=2+2+2，则有 3×3>2×2×2 。
 *
 * 为使乘积最大，只有长度为 22 和 33 的绳子不应再切分
 * 绳子切分方案	     乘积	        结论
 * 2 = 1+1	         1×1=1	        2不应切分
 * 3=1+2	         1×2=2	        33 不应切分
 * 4=2+2=1+3	     2×2=4>1×3=3	4 和 2 等价，且 2+2 比 1+3 更优
 * 5=2+3=1+4	     2×3=6>1×4=4	5 应切分为 2+3
 * 6=3+3=2+2+2	     3×3=9>2×2×2=8	6 应切分为 3+3 ，进而推出3 比 2 更优
 * >7           	...	             长绳（长度>7）可转化为多个短绳（长度1~6），因此肯定应切分
 */
public class S14_cuttingRope {
    public int cuttingRope(int n) {
        if(n <= 3) return n - 1;
        int a = n / 3, b = n % 3;
        //能被整除，就可以3的a次方就是最大值
        if(b == 0) return (int)Math.pow(3, a);
        //不能被整除，且余数为1
        if(b == 1) return (int)Math.pow(3, a - 1) * 4;
        return (int)Math.pow(3, a) * 2;
    }

}
