package leetcode;

/**
 * Created by 清风
 * 2020/5/11 18:11
 *
 * 快速幂
 *
 * 面试题16. 数值的整数次方
 * 实现函数double Power(double base, int exponent)，求base的exponent次方。
 * 不得使用库函数，同时不需要考虑大数问题。
 *
 * 示例 1:
 * 输入: 2.00000, 10
 * 输出: 1024.00000
 *
 * 示例 2:
 * 输入: 2.10000, 3
 * 输出: 9.26100
 *
 * 示例 3:
 * 输入: 2.00000, -2
 * 输出: 0.25000
 * 解释: 2-2 = 1/22 = 1/4 = 0.25
 *
 * n&1 （与操作）： 判断 n 二进制最右一位是否为 1 ；
 * n>>1 （移位操作）： n 右移一位（可理解为删除最后一位）。
 *
 * 十进制数字 nn 的二进制表示，可对快速幂进行数学化解释。
 */
public class S16_myPow {
    public double myPow(double x, int n) {
        //当 x = 0时：直接返回 0 （避免后续 x = 1/x 操作报错）。
        if(x == 0) return 0;
        //n∈[−2147483648,2147483647] ，
        // 因此当 n = -2147483648 时执行 n = -n会因越界而赋值出错。
        // 解决方法是先将 n 存入 long 变量 b
        long b = n;
        double res = 1.0;
        //当 n < 0时：把问题转化至 n≥0 的范围内，即执行 x = 1/x，n=−n ；
        if(b < 0) {
            x = 1 / x;
            b = -b;
        }
        //循环计算：当 n = 0 时跳出；
        while(b > 0) {
            //当 n&1=1 时：将当前 x 乘入 res （即res∗=x ）；
            if((b & 1) == 1) res *= x;
            //执行 x = x^2 即 x *= x ）
            x *= x;
            //执行 n 右移一位（即 n >>= 1）。
            b >>= 1;
        }
        return res;
    }

}
